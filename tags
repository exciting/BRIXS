!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
10	mod_hdf5.f90	/^        10 continue$/;"	l	function:hdf5_exist_group	file:
10	mod_hdf5.f90	/^        10 continue$/;"	l	subroutine:hdf5_create_file	file:
10	mod_hdf5.f90	/^        10 continue$/;"	l	subroutine:hdf5_create_group	file:
10	mod_hdf5.f90	/^        10 continue$/;"	l	subroutine:hdf5_get_dims	file:
10	mod_hdf5.f90	/^    10 continue$/;"	l	subroutine:hdf5_read_array_block_d	file:
10	mod_hdf5.f90	/^    10 continue$/;"	l	subroutine:hdf5_read_array_block_i4	file:
10	mod_hdf5.f90	/^    10 continue$/;"	l	subroutine:hdf5_read_array_c	file:
10	mod_hdf5.f90	/^    10 continue$/;"	l	subroutine:hdf5_read_array_d	file:
10	mod_hdf5.f90	/^    10 continue$/;"	l	subroutine:hdf5_read_array_i4	file:
10	mod_hdf5.f90	/^    10 continue$/;"	l	subroutine:hdf5_write_array_c	file:
10	mod_hdf5.f90	/^    10 continue$/;"	l	subroutine:hdf5_write_array_d	file:
10	mod_hdf5.f90	/^    10 continue$/;"	l	subroutine:hdf5_write_array_i4	file:
A	rixs.f90	/^  complex(8), allocatable :: B_matrix(:,:,:),A(/;"	v	program:rixs
A_inter	rixs.f90	/^  complex(8), allocatable :: B_matrix(:,:,:),A(:,:), A_matrix(:,:,:),A_inter(/;"	v	program:rixs
A_matrix	rixs.f90	/^  complex(8), allocatable :: B_matrix(:,:,:),A(:,:), A_matrix(/;"	v	program:rixs
B	rixs.f90	/^  complex(8), allocatable :: chi_optical(:,:,:), B(/;"	v	program:rixs
B_matrix	rixs.f90	/^  complex(8), allocatable :: B_matrix(/;"	v	program:rixs
alpha	rixs_b.f90	/^  complex(8) :: alpha,/;"	v	program:rixs
beta	rixs_b.f90	/^  complex(8) :: alpha, beta$/;"	v	program:rixs
block1d	mod_blocks.f90	/^  type :: block1d$/;"	t	module:mod_blocks
block2d	mod_blocks.f90	/^  type :: block2d$/;"	t	module:mod_blocks
blocksize	mod_blocks.f90	/^    integer(4) :: blocksize /;"	k	type:block1d
blocksize	mod_blocks.f90	/^    integer(4) :: blocksize /;"	k	type:block2d
blsz_	rixs_b.f90	/^  integer(4) :: nblocks_, blsz_,/;"	v	program:rixs
broad	mod_io.f90	/^    real(8) :: broad,/;"	k	type:input
broad	rixs.f90	/^  real(8) :: broad,/;"	v	program:rixs
broad	rixs_b.f90	/^  real(8) :: broad,/;"	v	program:rixs
broad2	mod_io.f90	/^    real(8) :: broad, broad2$/;"	k	type:input
broad2	rixs.f90	/^  real(8) :: broad, broad2$/;"	v	program:rixs
broad2	rixs_b.f90	/^  real(8) :: broad, broad2$/;"	v	program:rixs
chi_optical	rixs.f90	/^  complex(8), allocatable :: chi_optical(/;"	v	program:rixs
core	rixs.f90	/^  type(io) :: optical, core$/;"	v	program:rixs
core	rixs_b.f90	/^  type(io) :: optical, core$/;"	v	program:rixs
dcontent	mod_blocks.f90	/^    real(8), allocatable :: dcontent(/;"	k	type:block1d
dcontent	mod_blocks.f90	/^    real(8), allocatable :: dcontent(/;"	k	type:block2d
eigvecs	mod_io.f90	/^    complex(8), allocatable :: eigvecs(/;"	k	type:io
evals	mod_io.f90	/^    real(8), allocatable :: evals(/;"	k	type:io
evals_b	rixs_b.f90	/^  type(block1d) :: vecA_b, evals_b$/;"	v	program:rixs
evecs_b	rixs_b.f90	/^  type(block2d) :: evecs_b$/;"	v	program:rixs
fname_core	rixs.f90	/^  character(1024) :: fname_core,/;"	v	program:rixs
fname_core	rixs_b.f90	/^  character(1024) :: fname_core,/;"	v	program:rixs
fname_optical	rixs.f90	/^  character(1024) :: fname_core, fname_optical,/;"	v	program:rixs
fname_optical	rixs_b.f90	/^  character(1024) :: fname_core, fname_optical,/;"	v	program:rixs
fname_pmat	rixs.f90	/^  character(1024) :: fname_core, fname_optical,fname_pmat$/;"	v	program:rixs
fname_pmat	rixs_b.f90	/^  character(1024) :: fname_core, fname_optical,fname_pmat$/;"	v	program:rixs
generate_Avector_b	mod_blocks.f90	/^  subroutine generate_Avector_b(/;"	s	module:mod_blocks
generate_Bvector	mod_rixs.f90	/^  subroutine generate_Bvector(/;"	s	module:mod_rixs
generate_Bvector_b	mod_blocks.f90	/^  subroutine generate_Bvector_b(/;"	s	module:mod_blocks
generate_chi	mod_rixs.f90	/^  subroutine generate_chi(/;"	s	module:mod_rixs
generate_chi_block	mod_blocks.f90	/^  subroutine generate_chi_block(/;"	s	module:mod_blocks
generate_oscstr	mod_rixs.f90	/^  subroutine generate_oscstr(/;"	s	module:mod_rixs
generate_t	mod_rixs.f90	/^  subroutine generate_t(/;"	s	module:mod_rixs
generate_tblock	mod_blocks.f90	/^  subroutine generate_tblock(/;"	s	module:mod_blocks
generate_tprime	mod_rixs.f90	/^  subroutine generate_tprime(/;"	s	module:mod_rixs
generate_tprime_block	mod_blocks.f90	/^  subroutine generate_tprime_block(/;"	s	module:mod_blocks
get_eigvecs	mod_io.f90	/^  subroutine get_eigvecs(/;"	s	module:mod_io
get_eigvecs2D_b	mod_blocks.f90	/^  subroutine get_eigvecs2D_b(/;"	s	module:mod_blocks
get_evals	mod_io.f90	/^  subroutine get_evals(/;"	s	module:mod_io
get_evals_block	mod_blocks.f90	/^    subroutine get_evals_block(/;"	s	module:mod_blocks
get_ismap	mod_io.f90	/^  subroutine get_ismap(/;"	s	module:mod_io
get_koulims	mod_io.f90	/^  subroutine get_koulims(/;"	s	module:mod_io
get_smap	mod_io.f90	/^  subroutine get_smap(/;"	s	module:mod_io
hamsiz	rixs.f90	/^  integer :: interdim(2), hamsiz,/;"	v	program:rixs
hamsize	mod_io.f90	/^    integer(4) :: hamsize,/;"	k	type:io
hdf5_create_file	mod_hdf5.f90	/^    subroutine hdf5_create_file(/;"	s	module:mod_hdf5
hdf5_create_group	mod_hdf5.f90	/^    subroutine hdf5_create_group(/;"	s	module:mod_hdf5
hdf5_exist_group	mod_hdf5.f90	/^    logical function hdf5_exist_group(/;"	f	module:mod_hdf5
hdf5_finalize	mod_hdf5.f90	/^    subroutine hdf5_finalize$/;"	s	module:mod_hdf5
hdf5_get_dims	mod_hdf5.f90	/^    subroutine hdf5_get_dims(/;"	s	module:mod_hdf5
hdf5_initialize	mod_hdf5.f90	/^    subroutine hdf5_initialize$/;"	s	module:mod_hdf5
hdf5_read_array_block_d	mod_hdf5.f90	/^subroutine hdf5_read_array_block_d(/;"	s
hdf5_read_array_block_i4	mod_hdf5.f90	/^subroutine hdf5_read_array_block_i4(/;"	s
hdf5_read_array_c	mod_hdf5.f90	/^subroutine hdf5_read_array_c(/;"	s
hdf5_read_array_d	mod_hdf5.f90	/^subroutine hdf5_read_array_d(/;"	s
hdf5_read_array_i4	mod_hdf5.f90	/^subroutine hdf5_read_array_i4(/;"	s
hdf5_read_block_d	mod_hdf5.f90	/^    subroutine hdf5_read_block_d(/;"	s	module:mod_hdf5
hdf5_read_block_i4	mod_hdf5.f90	/^    subroutine hdf5_read_block_i4(/;"	s	module:mod_hdf5
hdf5_read_block_z	mod_hdf5.f90	/^    subroutine hdf5_read_block_z(/;"	s	module:mod_hdf5
hdf5_read_c	mod_hdf5.f90	/^    subroutine hdf5_read_c(/;"	s	module:mod_hdf5
hdf5_read_d	mod_hdf5.f90	/^    subroutine hdf5_read_d(/;"	s	module:mod_hdf5
hdf5_read_i4	mod_hdf5.f90	/^    subroutine hdf5_read_i4(/;"	s	module:mod_hdf5
hdf5_read_l	mod_hdf5.f90	/^    subroutine hdf5_read_l(/;"	s	module:mod_hdf5
hdf5_read_z	mod_hdf5.f90	/^    subroutine hdf5_read_z(/;"	s	module:mod_hdf5
hdf5_write_array_c	mod_hdf5.f90	/^subroutine hdf5_write_array_c(/;"	s
hdf5_write_array_d	mod_hdf5.f90	/^subroutine hdf5_write_array_d(/;"	s
hdf5_write_array_i4	mod_hdf5.f90	/^subroutine hdf5_write_array_i4(/;"	s
hdf5_write_c	mod_hdf5.f90	/^    subroutine hdf5_write_c(/;"	s	module:mod_hdf5
hdf5_write_d	mod_hdf5.f90	/^    subroutine hdf5_write_d(/;"	s	module:mod_hdf5
hdf5_write_i4	mod_hdf5.f90	/^    subroutine hdf5_write_i4(/;"	s	module:mod_hdf5
hdf5_write_l	mod_hdf5.f90	/^    subroutine hdf5_write_l(/;"	s	module:mod_hdf5
hdf5_write_z	mod_hdf5.f90	/^    subroutine hdf5_write_z(/;"	s	module:mod_hdf5
id	mod_blocks.f90	/^    integer(4) :: id /;"	k	type:block1d
id	mod_blocks.f90	/^    integer(4), dimension(2) :: id /;"	k	type:block2d
il	mod_blocks.f90	/^    integer(4) :: il,/;"	k	type:block1d
il	mod_blocks.f90	/^    integer(4) :: il,/;"	k	type:block2d
input	mod_io.f90	/^  type :: input$/;"	t	module:mod_io
inputparam	rixs.f90	/^  type(input) :: inputparam$/;"	v	program:rixs
inputparam	rixs_b.f90	/^  type(input) :: inputparam$/;"	v	program:rixs
inspect_h5	mod_io.f90	/^  subroutine inspect_h5(/;"	s	module:mod_io
inter	rixs.f90	/^  complex(8), allocatable :: inter(/;"	v	program:rixs
inter2	rixs.f90	/^  complex(8) :: inter2$/;"	v	program:rixs
interdim	rixs.f90	/^  integer :: interdim(/;"	v	program:rixs
interdim	rixs_b.f90	/^  integer :: interdim(/;"	v	program:rixs
io	mod_io.f90	/^  type :: io$/;"	t	module:mod_io
ismap	mod_io.f90	/^    integer(4), allocatable :: smap(:,:), ismap(/;"	k	type:io
iu	mod_blocks.f90	/^    integer(4) :: il, iu /;"	k	type:block1d
iu	mod_blocks.f90	/^    integer(4) :: il, iu,/;"	k	type:block2d
jl	mod_blocks.f90	/^    integer(4) :: il, iu, jl,/;"	k	type:block2d
ju	mod_blocks.f90	/^    integer(4) :: il, iu, jl, ju /;"	k	type:block2d
k	rixs.f90	/^  integer :: w, nkm/;"	v	program:rixs
k	rixs_b.f90	/^  integer(4) :: nblocks/;"	v	program:rixs
k2	rixs_b.f90	/^  integer(4) :: nblocks_, blsz_, k, k2$/;"	v	program:rixs
koulims	mod_io.f90	/^    integer(4), allocatable :: smap(:,:), ismap(:,:,:), koulims(/;"	k	type:io
koulims_comb	rixs.f90	/^  integer(4), allocatable :: koulims_comb(/;"	v	program:rixs
koulims_comb	rixs_b.f90	/^  integer(4), allocatable :: koulims_comb(/;"	v	program:rixs
lambda	rixs.f90	/^  integer :: interdim(2), hamsiz, lambda$/;"	v	program:rixs
lambda	rixs_b.f90	/^  integer :: interdim(2), lambda$/;"	v	program:rixs
lo	mod_io.f90	/^    integer(4) :: hamsize, lu,uu,lo,/;"	k	type:io
lu	mod_io.f90	/^    integer(4) :: hamsize, lu,/;"	k	type:io
matprod_matmat	mod_matmul.f90	/^  subroutine matprod_matmat(/;"	s	module:mod_matmul
matprod_matvec	mod_matmul.f90	/^  subroutine matprod_matvec(/;"	s	module:mod_matmul
matprod_vecvec	mod_matmul.f90	/^  subroutine matprod_vecvec(/;"	s	module:mod_matmul
mod_blocks	mod_blocks.f90	/^module mod_blocks$/;"	m
mod_hdf5	mod_hdf5.f90	/^module mod_hdf5$/;"	m
mod_io	mod_io.f90	/^module mod_io$/;"	m
mod_matmul	mod_matmul.f90	/^module mod_matmul$/;"	m
mod_rixs	mod_rixs.f90	/^module mod_rixs$/;"	m
nblocks	mod_blocks.f90	/^    integer(4) :: nblocks /;"	k	type:block1d
nblocks	mod_blocks.f90	/^    integer(4) :: nblocks /;"	k	type:block2d
nblocks_	rixs_b.f90	/^  integer(4) :: nblocks_,/;"	v	program:rixs
nk0	mod_io.f90	/^    integer(4) :: hamsize, lu,uu,lo,uo, nk0,/;"	k	type:io
nkmax	mod_io.f90	/^    integer(4) :: hamsize, lu,uu,lo,uo, nk0, nkmax,/;"	k	type:io
nkmax	rixs.f90	/^  integer :: w, nkmax,/;"	v	program:rixs
nkmax	rixs_b.f90	/^  integer :: nkmax,/;"	v	program:rixs
no	mod_io.f90	/^    integer(4) :: hamsize, lu,uu,lo,uo, nk0, nkmax, nu, no$/;"	k	type:io
no	rixs.f90	/^  integer :: w, nkmax, nu, no,/;"	v	program:rixs
no	rixs_b.f90	/^  integer :: nkmax, nu, no,/;"	v	program:rixs
nu	mod_io.f90	/^    integer(4) :: hamsize, lu,uu,lo,uo, nk0, nkmax, nu,/;"	k	type:io
nu	rixs.f90	/^  integer :: w, nkmax, nu,/;"	v	program:rixs
nu	rixs_b.f90	/^  integer :: nkmax, nu,/;"	v	program:rixs
offset	mod_blocks.f90	/^    integer(4) :: offset /;"	k	type:block1d
offset	mod_blocks.f90	/^    integer(4), dimension(2) :: offset /;"	k	type:block2d
omega	mod_io.f90	/^    real(8), allocatable :: omega(/;"	k	type:input
omega	rixs.f90	/^  real(8), allocatable :: omega(/;"	v	program:rixs
omega	rixs_b.f90	/^  real(8), allocatable :: omega(/;"	v	program:rixs
omega2	mod_io.f90	/^    real(8), allocatable :: omega(:), omega2(/;"	k	type:input
omega2	rixs.f90	/^  real(8), allocatable :: omega(:), omega2(/;"	v	program:rixs
omega2	rixs_b.f90	/^  real(8), allocatable :: omega(:), omega2(/;"	v	program:rixs
optical	rixs.f90	/^  type(io) :: optical,/;"	v	program:rixs
optical	rixs_b.f90	/^  type(io) :: optical,/;"	v	program:rixs
oscstr	mod_io.f90	/^    logical :: oscstr$/;"	k	type:input
oscstr	rixs.f90	/^  complex(8), allocatable :: inter(:), oscstr(/;"	v	program:rixs
oscstr_b	rixs_b.f90	/^  complex(8), allocatable :: oscstr_b(/;"	v	program:rixs
pol	rixs.f90	/^  real(8) :: pol(/;"	v	program:rixs
pol	rixs_b.f90	/^  real(8) :: pol(/;"	v	program:rixs
read_inputfile	mod_io.f90	/^  subroutine read_inputfile(/;"	s	module:mod_io
results	rixs.f90	/^  real(8), allocatable :: results(/;"	v	program:rixs
rixs	rixs.f90	/^program rixs$/;"	p
rixs	rixs_b.f90	/^program rixs$/;"	p
set_param	mod_io.f90	/^  subroutine set_param(/;"	s	module:mod_io
smap	mod_io.f90	/^    integer(4), allocatable :: smap(/;"	k	type:io
tprime	rixs.f90	/^  complex(8), allocatable :: chi_optical(:,:,:), B(:,:), tprime(/;"	v	program:rixs
transform2matrix	mod_rixs.f90	/^  subroutine transform2matrix(/;"	s	module:mod_rixs
transform2matrix_b	mod_blocks.f90	/^    subroutine transform2matrix_b(/;"	s	module:mod_blocks
transform2vector	mod_rixs.f90	/^  subroutine transform2vector(/;"	s	module:mod_rixs
transform2vector_b	mod_blocks.f90	/^    subroutine transform2vector_b(/;"	s	module:mod_blocks
uo	mod_io.f90	/^    integer(4) :: hamsize, lu,uu,lo,uo,/;"	k	type:io
uu	mod_io.f90	/^    integer(4) :: hamsize, lu,uu,/;"	k	type:io
vecA_b	rixs_b.f90	/^  type(block1d) :: vecA_b,/;"	v	program:rixs
w	rixs.f90	/^  integer :: w,/;"	v	program:rixs
w1	rixs.f90	/^  integer :: w, nkmax, nu, no, k, w1,/;"	v	program:rixs
w1	rixs_b.f90	/^  integer :: nkmax, nu, no, w1$/;"	v	program:rixs
w2	rixs.f90	/^  integer :: w, nkmax, nu, no, k, w1, w2$/;"	v	program:rixs
zcontent	mod_blocks.f90	/^    complex(8), allocatable :: zcontent(/;"	k	type:block1d
zcontent	mod_blocks.f90	/^    complex(8), allocatable :: zcontent(/;"	k	type:block2d
